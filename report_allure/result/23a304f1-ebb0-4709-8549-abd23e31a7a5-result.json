{"name": "test_01[Case1]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_01.Test_01 object at 0x000001D1F8D8D470>, case = 'Case1'\n\n    @pytest.mark.skipif(len(CASE) == 0, reason=skip_reason)\n    @pytest.mark.parametrize('case', CASE)\n    @pytest.mark.package\n    @pytest.mark.all\n    def test_01(self, case):\n>       Runcase().all_run(path=PATH, case=case)\n\ntestcase_py\\smoke\\test_01.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Data_Manager.py:40: in all_run\n    self.run(value, case)\ncommon\\Data_Manager.py:30: in run\n    Params(value).yaml_params_split(case)\ncommon\\yamlParams.py:159: in yaml_params_split\n    body=self.body, image=self.image, file=self.file, check=self.check).yaml_request()\ncommon\\Request.py:31: in yaml_request\n    self.yaml_get()\ncommon\\Request.py:54: in yaml_get\n    self.res(res)\ncommon\\Request.py:139: in res\n    AssertResult(check=self.check, value=value, code=code).expected()\nassertfun\\Assert_Func.py:29: in expected\n    self.handle_values(key, value)\nassertfun\\Assert_Func.py:41: in handle_values\n    self.rule.get(key)(actual_value=int(self.actual_code), expect_value=int(expected_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpect_value = 200, actual_value = 404\n\n    @staticmethod\n    def _eq(expect_value, actual_value):\n        allure_value(expect_value, actual_value)\n>       assert actual_value == expect_value\nE       AssertionError\n\nassertfun\\Assert_Func.py:73: AssertionError"}, "steps": [{"name": "name", "status": "passed", "attachments": [{"name": "name", "source": "f4571208-a9ca-4e16-a617-d9b7fa2f0cd5-attachment.attach"}], "start": 1632904729181, "stop": 1632904729182}, {"name": "title", "status": "passed", "attachments": [{"name": "title", "source": "181e3000-3f53-4a81-a83e-da34b2a6275a-attachment.attach"}], "start": 1632904729182, "stop": 1632904729182}, {"name": "url", "status": "passed", "attachments": [{"name": "url", "source": "191ed3ef-178e-4a21-83da-c955eed6a76f-attachment.attach"}], "start": 1632904729183, "stop": 1632904729183}, {"name": "method", "status": "passed", "attachments": [{"name": "method", "source": "325683d3-1061-4371-a284-c3163e475553-attachment.attach"}], "start": 1632904729183, "stop": 1632904729183}, {"name": "check", "status": "passed", "attachments": [{"name": "check", "source": "96c318f8-06a8-4a39-b75f-0eee8755b3e6-attachment.attach"}], "start": 1632904729190, "stop": 1632904729190}], "attachments": [{"name": "log", "source": "6a1fd7c6-ecb0-460c-ba1a-82f880442a84-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "'Case1'"}], "start": 1632904729178, "stop": 1632904729191, "uuid": "dae21a50-3fd8-4984-8b40-b5e5d22c08ab", "historyId": "de60e099ffb49a2f91ad564734be37b5", "testCaseId": "855eb9ca2c99f4f80ba603c0d3776476", "fullName": "testcase_py.smoke.test_01.Test_01#test_01", "labels": [{"name": "feature", "value": "Test_01"}, {"name": "tag", "value": "all"}, {"name": "tag", "value": "@pytest.mark.skipif(False, reason='D:\\FYL_API_AT\\testcase_yaml\\smoke\\test_01.yaml(testcase skip)')"}, {"name": "tag", "value": "package"}, {"name": "parentSuite", "value": "testcase_py.smoke"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Test_01"}, {"name": "host", "value": "1MC6D53"}, {"name": "thread", "value": "19044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase_py.smoke.test_01"}]}