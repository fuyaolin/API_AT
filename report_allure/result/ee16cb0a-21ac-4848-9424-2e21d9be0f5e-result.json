{"name": "test_01[Case2]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_01.Test_01 object at 0x000001D1F8D8D668>, case = 'Case2'\n\n    @pytest.mark.skipif(len(CASE) == 0, reason=skip_reason)\n    @pytest.mark.parametrize('case', CASE)\n    @pytest.mark.package\n    @pytest.mark.all\n    def test_01(self, case):\n>       Runcase().all_run(path=PATH, case=case)\n\ntestcase_py\\smoke\\test_01.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Data_Manager.py:40: in all_run\n    self.run(value, case)\ncommon\\Data_Manager.py:30: in run\n    Params(value).yaml_params_split(case)\ncommon\\yamlParams.py:159: in yaml_params_split\n    body=self.body, image=self.image, file=self.file, check=self.check).yaml_request()\ncommon\\Request.py:31: in yaml_request\n    self.yaml_get()\ncommon\\Request.py:54: in yaml_get\n    self.res(res)\ncommon\\Request.py:139: in res\n    AssertResult(check=self.check, value=value, code=code).expected()\nassertfun\\Assert_Func.py:29: in expected\n    self.handle_values(key, value)\nassertfun\\Assert_Func.py:41: in handle_values\n    self.rule.get(key)(actual_value=int(self.actual_code), expect_value=int(expected_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpect_value = 200, actual_value = 404\n\n    @staticmethod\n    def _eq(expect_value, actual_value):\n        allure_value(expect_value, actual_value)\n>       assert actual_value == expect_value\nE       AssertionError\n\nassertfun\\Assert_Func.py:73: AssertionError"}, "steps": [{"name": "name", "status": "passed", "attachments": [{"name": "name", "source": "a793b2b3-9bae-42fe-bc6e-7f7d6174d381-attachment.attach"}], "start": 1632904729249, "stop": 1632904729249}, {"name": "title", "status": "passed", "attachments": [{"name": "title", "source": "48b80cfd-f725-4cf5-8afe-a34ac862d581-attachment.attach"}], "start": 1632904729250, "stop": 1632904729250}, {"name": "url", "status": "passed", "attachments": [{"name": "url", "source": "1b32b182-98b0-4fdd-8e74-e0313af8ce2c-attachment.attach"}], "start": 1632904729250, "stop": 1632904729251}, {"name": "method", "status": "passed", "attachments": [{"name": "method", "source": "78599bff-13c5-47a4-a544-85567a29ccf9-attachment.attach"}], "start": 1632904729251, "stop": 1632904729251}, {"name": "check", "status": "passed", "attachments": [{"name": "check", "source": "809acfe2-8a24-4bd1-9f21-d95eba53fc9c-attachment.attach"}], "start": 1632904729267, "stop": 1632904729268}], "attachments": [{"name": "log", "source": "d3dde2d2-9e32-448c-9bb6-2a68587cd230-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "'Case2'"}], "start": 1632904729246, "stop": 1632904729268, "uuid": "85bf3275-ebf0-4253-a984-629308f3b28e", "historyId": "aa774b74eca3b47ae451919aa7b43500", "testCaseId": "855eb9ca2c99f4f80ba603c0d3776476", "fullName": "testcase_py.smoke.test_01.Test_01#test_01", "labels": [{"name": "feature", "value": "Test_01"}, {"name": "tag", "value": "all"}, {"name": "tag", "value": "@pytest.mark.skipif(False, reason='D:\\FYL_API_AT\\testcase_yaml\\smoke\\test_01.yaml(testcase skip)')"}, {"name": "tag", "value": "package"}, {"name": "parentSuite", "value": "testcase_py.smoke"}, {"name": "suite", "value": "test_01"}, {"name": "subSuite", "value": "Test_01"}, {"name": "host", "value": "1MC6D53"}, {"name": "thread", "value": "19044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase_py.smoke.test_01"}]}