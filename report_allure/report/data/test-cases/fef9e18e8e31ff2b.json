{
  "uid" : "fef9e18e8e31ff2b",
  "name" : "test_01[Case1]",
  "fullName" : "testcase_py.smoke.test_01.Test_01#test_01",
  "historyId" : "de60e099ffb49a2f91ad564734be37b5",
  "time" : {
    "start" : 1632904729178,
    "stop" : 1632904729191,
    "duration" : 13
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_01.Test_01 object at 0x000001D1F8D8D470>, case = 'Case1'\n\n    @pytest.mark.skipif(len(CASE) == 0, reason=skip_reason)\n    @pytest.mark.parametrize('case', CASE)\n    @pytest.mark.package\n    @pytest.mark.all\n    def test_01(self, case):\n>       Runcase().all_run(path=PATH, case=case)\n\ntestcase_py\\smoke\\test_01.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Data_Manager.py:40: in all_run\n    self.run(value, case)\ncommon\\Data_Manager.py:30: in run\n    Params(value).yaml_params_split(case)\ncommon\\yamlParams.py:159: in yaml_params_split\n    body=self.body, image=self.image, file=self.file, check=self.check).yaml_request()\ncommon\\Request.py:31: in yaml_request\n    self.yaml_get()\ncommon\\Request.py:54: in yaml_get\n    self.res(res)\ncommon\\Request.py:139: in res\n    AssertResult(check=self.check, value=value, code=code).expected()\nassertfun\\Assert_Func.py:29: in expected\n    self.handle_values(key, value)\nassertfun\\Assert_Func.py:41: in handle_values\n    self.rule.get(key)(actual_value=int(self.actual_code), expect_value=int(expected_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpect_value = 200, actual_value = 404\n\n    @staticmethod\n    def _eq(expect_value, actual_value):\n        allure_value(expect_value, actual_value)\n>       assert actual_value == expect_value\nE       AssertionError\n\nassertfun\\Assert_Func.py:73: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_01.Test_01 object at 0x000001D1F8D8D470>, case = 'Case1'\n\n    @pytest.mark.skipif(len(CASE) == 0, reason=skip_reason)\n    @pytest.mark.parametrize('case', CASE)\n    @pytest.mark.package\n    @pytest.mark.all\n    def test_01(self, case):\n>       Runcase().all_run(path=PATH, case=case)\n\ntestcase_py\\smoke\\test_01.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Data_Manager.py:40: in all_run\n    self.run(value, case)\ncommon\\Data_Manager.py:30: in run\n    Params(value).yaml_params_split(case)\ncommon\\yamlParams.py:159: in yaml_params_split\n    body=self.body, image=self.image, file=self.file, check=self.check).yaml_request()\ncommon\\Request.py:31: in yaml_request\n    self.yaml_get()\ncommon\\Request.py:54: in yaml_get\n    self.res(res)\ncommon\\Request.py:139: in res\n    AssertResult(check=self.check, value=value, code=code).expected()\nassertfun\\Assert_Func.py:29: in expected\n    self.handle_values(key, value)\nassertfun\\Assert_Func.py:41: in handle_values\n    self.rule.get(key)(actual_value=int(self.actual_code), expect_value=int(expected_value))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpect_value = 200, actual_value = 404\n\n    @staticmethod\n    def _eq(expect_value, actual_value):\n        allure_value(expect_value, actual_value)\n>       assert actual_value == expect_value\nE       AssertionError\n\nassertfun\\Assert_Func.py:73: AssertionError",
    "steps" : [ {
      "name" : "name",
      "time" : {
        "start" : 1632904729181,
        "stop" : 1632904729182,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a9bc123ed588faf0",
        "name" : "name",
        "source" : "a9bc123ed588faf0.attach",
        "type" : "text/plain",
        "size" : 24
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "title",
      "time" : {
        "start" : 1632904729182,
        "stop" : 1632904729182,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "2ec372474c24c7f5",
        "name" : "title",
        "source" : "2ec372474c24c7f5.attach",
        "type" : "text/plain",
        "size" : 19
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "url",
      "time" : {
        "start" : 1632904729183,
        "stop" : 1632904729183,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "b3c245dcb803b558",
        "name" : "url",
        "source" : "b3c245dcb803b558.attach",
        "type" : "text/plain",
        "size" : 136
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "method",
      "time" : {
        "start" : 1632904729183,
        "stop" : 1632904729183,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "1d3aa90ac714829e",
        "name" : "method",
        "source" : "1d3aa90ac714829e.attach",
        "type" : "text/plain",
        "size" : 11
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    }, {
      "name" : "check",
      "time" : {
        "start" : 1632904729190,
        "stop" : 1632904729190,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "9bd353404c398fbd",
        "name" : "check",
        "source" : "9bd353404c398fbd.attach",
        "type" : "text/plain",
        "size" : 39
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ {
      "uid" : "ec901c639b9fe330",
      "name" : "log",
      "source" : "ec901c639b9fe330.txt",
      "type" : "text/plain",
      "size" : 575
    } ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "hasContent" : true,
    "attachmentsCount" : 6,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Test_01"
  }, {
    "name" : "tag",
    "value" : "all"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.skipif(False, reason='D:\\FYL_API_AT\\testcase_yaml\\smoke\\test_01.yaml(testcase skip)')"
  }, {
    "name" : "tag",
    "value" : "package"
  }, {
    "name" : "parentSuite",
    "value" : "testcase_py.smoke"
  }, {
    "name" : "suite",
    "value" : "test_01"
  }, {
    "name" : "subSuite",
    "value" : "Test_01"
  }, {
    "name" : "host",
    "value" : "1MC6D53"
  }, {
    "name" : "thread",
    "value" : "19044-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase_py.smoke.test_01"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "'Case1'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "all", "package", "@pytest.mark.skipif(False, reason='D:\\FYL_API_AT\\testcase_yaml\\smoke\\test_01.yaml(testcase skip)')" ]
  },
  "source" : "fef9e18e8e31ff2b.json",
  "parameterValues" : [ "'Case1'" ]
}